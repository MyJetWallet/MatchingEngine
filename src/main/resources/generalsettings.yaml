MatchingEngine:
  matchingEngine:
    db:
      hBlobConnString: ${ME-AzureStorageUrl}
      hBestPriceConnString: ${ME-AzureStorageUrl}
      hCandlesConnString: ${ME-AzureStorageUrl}
      hHourCandlesConnString: ${ME-AzureStorageUrl}
      balancesInfoConnString: ${ME-AzureStorageUrl}
      hTradesConnString: ${ME-AzureStorageUrl}
      dictsConnString: ${ME-AzureStorageUrl}
      sharedStorageConnString: ${ME-AzureStorageUrl}
      messageLogConnString: ${ME-AzureStorageUrl}
      matchingEngineConnString: ${ME-AzureStorageUrl}
      monitoringConnString: ${ME-AzureStorageUrl}
      reservedVolumesConnString: ${ME-AzureStorageUrl}
      accountsTableName: ${ME-AzureStorageUrl}
      newAccountsTableName: ${ME-AzureStorageUrl}
    redis:
      host: ${ME-RedisHost}
      port: ${ME-RedisPort}
      timeout: 1000
      useSsl: false
      balanceDatabase: 0
      processedMessageDatabase: 1
      processedCashMessageDatabase: 2
      ordersDatabase: 3
      pingDatabase: 4
      sequenceNumberDatabase: 5
    grpcEndpoints:
      cashApiServicePort: 5001
      tradingApiServicePort: 5002
      dictionariesConnection: ${ME-AssetsServiceUrl}
    socket:
      port: 8888
      maxConnections: 100
    serverOrderBookPort: 8887
    serverOrderBookMaxConnections: 10
    httpOrderBookPort: 8886
    httpApiPort: 8885
    rabbitMqConfigs:
      orderBooks:
        uri: ${ME-Rabbit-OrderBooksUrl}
        exchange: spot.me.orderbooks
      cashOperations:
        uri: ${ME-Rabbit-CashUrl}
        exchange: spot.me.cash
      reservedCashOperations:
        uri: ${ME-Rabbit-ReservedCashUrl}
        exchange: spot.me.reserved
      transfers:
        uri: ${ME-Rabbit-TransfersUrl}
        exchange: spot.me.transfers
      balanceUpdates:
        uri: ${ME-Rabbit-BalancesUrl}
        exchange: spot.me.balances
      marketOrders:
        uri: ${ME-Rabbit-MarketOrdersUrl}
        exchange: spot.me.orders.market
      limitOrders:
        uri: ${ME-Rabbit-LimitOrdersUrl}
        exchange: spot.me.orders.limit
      trustedLimitOrders:
        uri: ${ME-Rabbit-TrustedLimitOrdersUrl}
        exchange: spot.me.orders.limit.trusted
      events:
          -
            uri: ${ME-Rabbit-EventsUrl}
            exchange: spot.me.events
      trustedClientsEvents:
        -
            uri: ${ME-Rabbit-TrustedEventsUrl}
            exchange: spot.me.events.trusted
    bestPricesInterval: 100000
    candleSaverInterval: 100000
    hoursCandleSaverInterval: 100000
    correctReservedVolumes: true
    cancelMinVolumeOrders: true
    cancelAllOrders: false
    orderBookPath: store/orderbooks
    secondaryStopOrderBookPath: store/stoporderbooks-secondary
    secondaryOrderBookPath: store/orderbooks-secondary
    stopOrderBookPath: store/stoporderbooks
    queueConfig:
      queueSizeHealthCheckInterval: 10000
      queueSizeLoggerInterval: 60000
      queueSizeLimit: 5000
      maxQueueSizeLimit: 10000
      recoverQueueSizeLimit: 2000
      rabbitMaxQueueSizeLimit: 5000
      rabbitRecoverQueueSizeLimit: 2000
    name: Spot.MatchingEngine
    aliveStatus:
      updatePeriod: 10000
      lifeTime: 100000
    processedMessagesPath: store/processed
    processedMessagesInterval: 60000
    performanceStatsInterval: 60000
    keepAlive:
      passive: true
      name: Spot.MatchingEngine
    logFilesCleaner:
      enabled: false
    storage: Redis
    walletsMigration: false
    writeBalancesToSecondaryDb: true
    ordersMigration: false
    writeOrdersToSecondaryDb: true
  slackNotifications:
    azureQueue:
      connectionString: ${ME-AzureStorageUrl}
      queueName: TestQueue
  throttlingLogger:
    limitSeconds: 5